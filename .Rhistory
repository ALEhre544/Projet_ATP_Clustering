select(Compa_services, player, stin, stWon, svpt) %>%
mutate(rap_services = stin/svpt) -> Compa_services
summary(Compa_services$rap_services)
Base1 %>%
mutate(rap_breaks_sauves = bpSaved/bpFaced) -> Base1
summary(Base1$rap_breaks_sauves) #51%
Compa_services <- inner_join(B1_player, df_player)
Compa_services <- select(Compa_services, player, stin, stWon, svpt)
Compa_services %>%
select(Compa_services, player, stin, stWon, svpt) %>%
mutate(rap_services = stin/svpt) -> Compa_services
summary(Compa_services$rap_services)
str(Compa_services)
Base1 %>%
mutate(rap_breaks_sauves = bpSaved/bpFaced) -> Base1
summary(Base1$rap_breaks_sauves) #51%
Compa_services <- inner_join(B1_player, df_player)
Compa_services %>%
select(player, stin, stWon, svpt) %>%
mutate(rap_services = stin/svpt) -> Compa_services
str(Compa_services)
summary(Compa_services$rap_services)
Base2 %>%
mutate(player = rownames(Base2)) -> B2_player
Compa_services <- inner_join(B2_player, df_player)
Compa_services %>%
select(player, stin, stWon, svpt) %>%
mutate(rap_services = stin/svpt) -> Compa_services
summary(Compa_services$rap_services) #59%
Base3 %>%
mutate(player = rownames(Base3)) -> B3_player
Compa_services <- inner_join(B3_player, df_player)
Compa_services %>%
select(player, stin, stWon, svpt) %>%
mutate(rap_services = stin/svpt) -> Compa_services
summary(Compa_services$rap_services) #60,93%
Base4 %>%
mutate(player = rownames(Base4)) -> B4_player
Compa_services <- inner_join(B4_player, df_player)
Compa_services %>%
select(player, stin, stWon, svpt) %>%
mutate(rap_services = stin/svpt) -> Compa_services
summary(Compa_services$rap_services) #60,93%
df_clean %>%
ggplot()+geom_boxplot(mapping = aes(x = as.character(classe_hc), y = stin,
fill = as.character(classe_hc) ))
df_clean %>%
ggplot()+geom_boxplot(mapping = aes(x = as.character(classe_hc), y = min,
fill = as.character(classe_hc) ))
Base1 %>%
mutate(player = rownames(Base1)) -> B1_player
Compa_services <- inner_join(B1_player, df_player)
Compa_services %>%
select(player, stin, stWon, svpt) %>%
mutate(rap_services = stin/svpt,
rap_ace = ace/stin) -> Compa_services
summary(Compa_services$rap_services)
summary(Compa_services$rap_ace)#59,43%
Base1 %>%
mutate(player = rownames(Base1)) -> B1_player
Compa_services <- inner_join(B1_player, df_player)
Compa_services %>%
select(player, stin, stWon, svpt, ace) %>%
mutate(rap_services = stin/svpt,
rap_ace = ace/stin) -> Compa_services
summary(Compa_services$rap_services)
summary(Compa_services$rap_ace)#59,43%
Base1 %>%
mutate(player = rownames(Base1)) -> B1_player
Compa_services <- inner_join(B1_player, df_player)
Compa_services %>%
select(player, stin, stWon, svpt, ace) %>%
mutate(rap_services = stin/svpt,
rap_ace = ace/stin) -> Compa_services
summary(Compa_services$rap_services)
summary(Compa_services$rap_ace)#59,43%
View(Compa_services)
Base1 %>%
mutate(player = rownames(Base1)) -> B1_player
View(B1_player)
df_clean %>% filter(classe_hc == 1) -> Base1
Base1 <- Base1[,-c(9,10)]
df_clean %>% filter(classe_hc == 2) -> Base2
Base2 <- Base2[,-c(9,10)]
df_clean %>% filter(classe_hc == 3) -> Base3
Base3 <- Base3[,-c(9,10)]
df_clean %>% filter(classe_hc == 4) -> Base4
Base4 <- Base4[,-c(9,10)]
Base1 %>%
mutate(player = rownames(Base1)) -> B1_player
Compa_services <- inner_join(B1_player, df_player)
Compa_services %>%
select(player, stin, stWon, svpt, ace) %>%
mutate(rap_services = stin/svpt,
rap_ace = ace/stin) -> Compa_services
summary(Compa_services$rap_services)
summary(Compa_services$rap_ace)#59,43%
Base2 %>%
mutate(player = rownames(Base2)) -> B2_player
Compa_services <- inner_join(B2_player, df_player)
Compa_services %>%
select(player, stin, stWon, svpt, ace) %>%
mutate(rap_services = stin/svpt,
rap_ace = ace/stin) -> Compa_services
summary(Compa_services$rap_services) #60,93%
summary(Compa_services$rap_ace) #8,76%
Base3 %>%
mutate(player = rownames(Base3)) -> B3_player
Compa_services <- inner_join(B3_player, df_player)
Compa_services %>%
select(player, stin, stWon, svpt, ace) %>%
mutate(rap_services = stin/svpt,
rap_ace = ace/stin) -> Compa_services
summary(Compa_services$rap_services) #61,34%
summary(Compa_services$rap_ace) #8,76%
Base4 %>%
mutate(player = rownames(Base4)) -> B4_player
Compa_services <- inner_join(B4_player, df_player)
Compa_services %>%
select(player, stin, stWon, svpt, ace) %>%
mutate(rap_services = stin/svpt,
rap_ace = ace/stin) -> Compa_services
summary(Compa_services$rap_services) #60,89%
summary(Compa_services$rap_ace) #8,76%
df_clean %>%
ggplot()+geom_boxplot(mapping = aes(x = as.character(classe_hc), y = ace,
fill = as.character(classe_hc) )) -> g_age
df_clean %>%
ggplot()+geom_boxplot(mapping = aes(x = as.character(classe_hc), y = height,
fill = as.character(classe_hc) )) -> g_height
gridExtra::grid.arrange(g_age, g_height, ncol = 2, nrow = 1)
summary(df_player$ace)
df_clean %>%
ggplot() +
geom_boxplot(mapping = aes(x = as.character(classe_hc), y = stin, fill = as.character(classe_hc) )) +
labs(fill = 'Répartition du nombre moyen de services réussis au sein des clusters',
y = 'Nombre moyen de services réussis', x = 'Clusters')
df_clean %>%
ggplot() +
geom_boxplot(mapping = aes(x = as.character(classe_hc), y = stin, fill = as.character(classe_hc) )) +
labs(y = 'Nombre moyen de services réussis', x = 'Clusters',fill ='Clusters') +
ggtitle('Répartition du nombre moyen de services réussis au sein des clusters')
df_clean %>%
ggplot() +
geom_boxplot(mapping = aes(x = as.character(classe_hc), y = min, fill = as.character(classe_hc) )) +
labs(y = 'Durée moyenne des matchs (minutes)', x = 'Clusters', fill ='Clusters') +
ggtitle('Répartition de la durée moyenne des matchs au sein des clusters')
df_clean %>%
ggplot() +
geom_boxplot(mapping = aes(x = as.character(classe_hc), y = min, fill = as.character(classe_hc) )) +
labs(y = 'Durée moyenne des matchs (minutes)', x = '', fill ='Clusters') +
ggtitle('Répartition de la durée moyenne des matchs au sein des clusters')
df_clean %>%
ggplot() +
geom_boxplot(mapping = aes(x = as.character(classe_hc), y = ace, fill = as.character(classe_hc) )) +
labs(fill = 'Clusters', y = 'Nombre moyen de aces', x = '') +
ggtitle('Répartition du nombre de aces au sein des clusters') -> g_age
df_clean %>%
ggplot() +
geom_boxplot(mapping = aes(x = as.character(classe_hc), y = height, fill = as.character(classe_hc) )) +
labs(fill = 'Clusters', y = 'Taille (en cm)', x = '') +
ggtitle('Répartition de la taille des joueurs au sein des clusters') -> g_height
gridExtra::grid.arrange(g_age, g_height, ncol = 2, nrow = 1)
df_clean %>%
ggplot() +
geom_boxplot(mapping = aes(x = as.character(classe_hc), y = ace, fill = as.character(classe_hc) )) +
labs(fill = 'Clusters', y = 'Nombre moyen de aces', x = '') +
ggtitle('Répartition du nombre de aces \n au sein des clusters') -> g_age
df_clean %>%
ggplot() +
geom_boxplot(mapping = aes(x = as.character(classe_hc), y = height, fill = as.character(classe_hc) )) +
labs(fill = 'Clusters', y = 'Taille (en cm)', x = '') +
ggtitle('Répartition de la taille des joueurs \n au sein des clusters') -> g_height
gridExtra::grid.arrange(g_age, g_height, ncol = 2, nrow = 1)
df_clean %>%
ggplot() +
geom_boxplot(mapping = aes(x = as.character(classe_hc), y = ace, fill = as.character(classe_hc) )) +
labs(fill = 'Clusters', y = 'Nombre moyen de aces', x = '') -> g_age
df_clean %>%
ggplot() +
geom_boxplot(mapping = aes(x = as.character(classe_hc), y = height, fill = as.character(classe_hc) )) +
labs(fill = 'Clusters', y = 'Taille (en cm)', x = '') -> g_height
gridExtra::grid.arrange(g_age, g_height, ncol = 2, nrow = 1)
`Clusters`= c("1","2","3","4")
`Pourcentage moyen de ace`=  c("8,76","10,84","18,55","9,07")
tab <- cbind(`Clusters`,`Pourcentage moyen de ace`)
kable(tab, caption="(ref: tab1)")
`Clusters`= c("1","2","3","4")
`Pourcentage moyen de ace`=  c("8,76","10,84","18,55","9,07")
tab <- cbind(`Clusters`,`Pourcentage moyen de ace`)
kable(tab, caption="(ref: tab1)")
`Clusters`= c("1","2","3","4")
`Pourcentage moyen de ace`=  c("8,76","10,84","18,55","9,07")
tab <- cbind(`Clusters`,`Pourcentage moyen de ace`)
kable(tab, caption="(ref: tab1)")
`Clusters`= c("1","2","3","4")
`Pourcentage moyen de ace`=  c("8,76","10,84","18,55","9,07")
tab <- cbind(`Clusters`,`Pourcentage moyen de ace`)
kable(tab, caption="(ref: tab1)", styling(position="center"))
`Clusters`= c("1","2","3","4")
`Pourcentage moyen de ace`=  c("8,76","10,84","18,55","9,07")
tab <- cbind(`Clusters`,`Pourcentage moyen de ace`)
kable(tab, caption="(ref: tab1)") %>%
kable_styling(position="center")
factoextra::fviz_cluster(list(data=df_CAH, cluster=clu_4),geom="point", data = df_CAH)
factoextra::fviz_cluster(list(data=df_CAH, cluster=clu_4),geom="point", data = df_CAH, main='')
df_clean %>%
ggplot() +
geom_boxplot(mapping = aes(x = as.character(classe_hc), y = stin, fill = as.character(classe_hc) )) +
labs(y = 'Nombre moyen de services réussis', x = '',fill ='Clusters')
`Clusters`= c("1","2","3","4")
`Pourcentage moyen de ace`=  c("8,76","10,84","18,55","9,07")
tab <- cbind(`Clusters`,`Pourcentage moyen de ace`)
kable(tab, caption="(ref:tab1)") %>%
kable_styling(position="center", latex_options= c("striped", "HOLD_position"))
`CAH`= c("Intertie interclasse","Intertie interclasse")
`3 clusters`=  c("976,72","900,72")
`4 clusters`=  c("704,78","1172,67")
tab <- cbind(`CAH`,`Inertie intraclasse`,`Inertie interclasse`)
`CAH`= c("Intertie interclasse","Intertie interclasse")
`3 clusters`=  c("976,72","900,72")
`4 clusters`=  c("704,78","1172,67")
tab <- cbind(`CAH`,`3 clusters`,`4 clusters`)
kable(tab, caption="(ref:tab5)") %>%
kable_styling(position="center", latex_options= c("striped", "HOLD_position"))
`Clusters`= c("1","2","3","4")
`Nombre d'individus`=  c("24","14","47","102")
`Coefficients de silhouette moyens`=  c("0,46","0,28","0,29","0,38")
tab <- cbind(`Clusters`,`Nombre d'individus`,`Coefficients de silhouette moyens`)
kable(tab, caption="(ref:tab4)") %>%
kable_styling(position="center", latex_options= c("striped", "HOLD_position"))
df_CAH <- as.data.frame(scale(df_clean, center=T, scale=T))
D_cah <- dist(df_CAH,"euclidean")
CAH <- hclust(D_cah, method = "ward.D2")
# Comparaison 3 - 4 clusters avec CAH
clu_3 <- cutree(CAH,3)
clu_4 <- cutree(CAH,4)
si_cah_3 <- cluster::silhouette(clu_3, D_cah)
si_cah_4 <- cluster::silhouette(clu_4, D_cah)
df_CAH$classe <- clu_4
df_clean$classe_hc <- df_CAH$classe
plot(si_cah_3)
plot(si_cah_4)
# s3 <- factoextra::fviz_silhouette(si_cah_3) + ggplot2::ylim(-1,1)
# s4 <- factoextra::fviz_silhouette(si_cah_4) + ggplot2::ylim(-1,1)
# gridExtra::grid.arrange(s3,s4, ncol = 2, nrow = 1)
# trouver comment prendre que le graph et pas les affichages console
plot(si)
si <- cluster::silhouette(km$cluster,dist(df_kmeans,"euclidean"))
plot(si)
`Méthode`= c("ward.D","single","complete","average","mcquitty","median","centroid","ward.D2")
`Nombre de clusters`=  c("3","3","3","3","3","3","3","3")
tab <- cbind(`Méthode`,`Nombre de clusters`)
kable(tab, caption="(ref:tab1)") %>%
kable_styling(position="center", latex_options= c("striped", "HOLD_position"))
library(tidyverse)
library(factoextra)
library(FactoMineR)
library(NbClust)
library(dendextend)
library(fpc)
library(devtools)
library(kableExtra)
#install_github("larmarange/JLutils")
#Ce bloc configure quelques options d'affichage pour les blocs R
library('knitr')
opts_chunk$set(comment = '', echo = FALSE,  tidy = TRUE,
fig.pos = 'ht!', fig.align='center', fig.width= 4.5, fig.height = 3.2)
players <- read_csv("tennis_atp/atp_players.csv", col_names = FALSE)
names(players) <- c("id", "firstname", "lastname", "hand", "birthday", "nat")
df <- read_csv("tennis_atp/atp_matches_2012.csv")
# Créer un tableau agrégé des gagnants
df_winner <- df  %>%
group_by(winner_name) %>%
summarise(w_ace = mean(w_ace, na.rm = TRUE),
w_ht = winner_ht,
w_age= round(winner_age),
w_stIn = mean(w_1stIn, na.rm = TRUE),
w_stWon = mean(w_1stWon, na.rm = TRUE),
w_svpt = mean(w_svpt, na.rm = TRUE),
w_svgms = mean(w_SvGms, na.rm = TRUE),
w_bpSaved = mean(w_bpSaved, na.rm = TRUE),
w_bpFaced = mean(w_bpFaced, na.rm = TRUE),
w_min = mean(minutes, na.rm = TRUE))
df_winner <- distinct(df_winner,.keep_all = TRUE)
# Créer un tableau agrégé des perdants
df_loser <- df  %>%
group_by(loser_name) %>%
summarise(l_ace = mean(l_ace, na.rm = TRUE),
l_ht = loser_ht,
l_age= round(loser_age),
l_stIn = mean(l_1stIn, na.rm = TRUE),
l_stWon = mean(l_1stWon, na.rm = TRUE),
l_svpt = mean(l_svpt, na.rm = TRUE),
l_svgms = mean(l_SvGms, na.rm = TRUE),
l_bpSaved = mean(l_bpSaved, na.rm = TRUE),
l_bpFaced = mean(l_bpFaced, na.rm = TRUE),
l_min = mean(minutes, na.rm = TRUE))
df_loser <- distinct(df_loser,.keep_all = TRUE)
# Donner le même nom du variable au "winner_name" et "loser_name"
df_loser <- rename(df_loser, player = loser_name )
df_winner <- rename(df_winner, player = winner_name)
# Jointure des tables
df_player <- full_join(df_winner, df_loser, by = "player")
# Combinaison des variables
df_player <- mutate(df_player, ace = w_ace + l_ace,
height = case_when(w_ht == l_ht ~ w_ht, w_ht != l_ht ~ l_ht),
age = round(max(w_age,l_age)),
stin = w_stIn  + l_stIn,
stWon = w_stWon + l_stWon,
svpt = w_svpt +l_svpt,
svgms = w_svgms + l_svgms,
bpSaved = w_bpSaved + l_bpSaved,
bpFaced = w_bpFaced + l_bpFaced,
min = l_min + w_min) %>%
select(ace, height, age, stin, stWon, svpt, svgms, bpSaved, bpFaced, min)
# Supprimer les valeurs manquantes
df_player <- distinct(df_player,.keep_all = TRUE)
df_player %>%
select(ace, height, stin, stWon, svgms, bpSaved, bpFaced, min) %>%
drop_na() -> df_clean
df_clean <- as.data.frame(df_clean)
rownames(df_clean) <- df_clean[,1]
df_clean <- df_clean[,-1]
set.seed(123)
df_kmeans <- as.data.frame(scale(df_clean, center=T, scale=T))
nb <- NbClust(df_kmeans, distance = "euclidean", min.nc = 2, max.nc = 10, method = "kmeans")
#fviz_nbclust(nb)
#Trouver comment prendre que le dernier graph
`Méthode`= c("ward.D","single","complete","average","mcquitty","median","centroid","ward.D2")
`Nombre de clusters`=  c("3","3","3","3","3","3","3","3")
tab <- cbind(`Méthode`,`Nombre de clusters`)
kable(tab, caption="(ref:tab1)") %>%
kable_styling(position="center", latex_options= c("striped", "HOLD_position"))
df_CAH <- as.data.frame(scale(df_clean, center=T, scale=T))
D_cah <- dist(df_CAH,"euclidean")
CAH <- hclust(D_cah, method = "ward.D2")
# Comparaison 3 - 4 clusters avec CAH
clu_3 <- cutree(CAH,3)
clu_4 <- cutree(CAH,4)
si_cah_3 <- cluster::silhouette(clu_3, D_cah)
si_cah_4 <- cluster::silhouette(clu_4, D_cah)
df_CAH$classe <- clu_4
df_clean$classe_hc <- df_CAH$classe
plot(si_cah_3)
plot(si_cah_4)
# s3 <- factoextra::fviz_silhouette(si_cah_3) + ggplot2::ylim(-1,1)
# s4 <- factoextra::fviz_silhouette(si_cah_4) + ggplot2::ylim(-1,1)
# gridExtra::grid.arrange(s3,s4, ncol = 2, nrow = 1)
# trouver comment prendre que le graph et pas les affichages console
set.seed(123)
km <- kmeans(df_kmeans, 4)
df_clean$classe_km <- km$cluster
# Coefficients de silhouette
#si <- cluster::silhouette(km$cluster,dist(df_kmeans,"euclidean"))
#plot(si)
#factoextra::fviz_silhouette(si) + ggplot2::ylim(-1,1)
#trouver comment prendre que le graph et pas les affichages console
df_CAH <- as.data.frame(scale(df_clean, center=T, scale=T))
D_cah <- dist(df_CAH,"euclidean")
CAH <- hclust(D_cah, method = "ward.D2")
# Comparaison 3 - 4 clusters avec CAH
clu_3 <- cutree(CAH,3)
clu_4 <- cutree(CAH,4)
si_cah_3 <- cluster::silhouette(clu_3, D_cah)
si_cah_4 <- cluster::silhouette(clu_4, D_cah)
df_CAH$classe <- clu_4
df_clean$classe_hc <- df_CAH$classe
plot(si_cah_3)
plot(si_cah_4)
# s3 <- factoextra::fviz_silhouette(si_cah_3) + ggplot2::ylim(-1,1)
# s4 <- factoextra::fviz_silhouette(si_cah_4) + ggplot2::ylim(-1,1)
# gridExtra::grid.arrange(s3,s4, ncol = 2, nrow = 1)
# trouver comment prendre que le graph et pas les affichages console
### Library -------------------------------------------------------------------------
library(tidyverse)
library(factoextra)
library(FactoMineR)
library(NbClust)
library(dendextend)
library(fpc)
library(devtools)
#install_github("larmarange/JLutils")
### Importation ---------------------------------------------------------------------
players <- read_csv("tennis_atp/atp_players.csv", col_names = FALSE)
names(players) <- c("id", "firstname", "lastname", "hand", "birthday", "nat")
df <- read_csv("tennis_atp/atp_matches_2012.csv")
### Préparation de la base ----------------------------------------------------------
# Créer un tableau agrégé des gagnants
df_winner <- df  %>%
group_by(winner_name) %>%
summarise(w_ace = mean(w_ace, na.rm = TRUE),
w_ht = winner_ht,
w_age= round(winner_age),
w_stIn = mean(w_1stIn, na.rm = TRUE),
w_stWon = mean(w_1stWon, na.rm = TRUE),
w_svpt = mean(w_svpt, na.rm = TRUE),
w_svgms = mean(w_SvGms, na.rm = TRUE),
w_bpSaved = mean(w_bpSaved, na.rm = TRUE),
w_bpFaced = mean(w_bpFaced, na.rm = TRUE),
w_min = mean(minutes, na.rm = TRUE))
df_winner <- distinct(df_winner,.keep_all = TRUE)
# Créer un tableau agrégé des perdants
df_loser <- df  %>%
group_by(loser_name) %>%
summarise(l_ace = mean(l_ace, na.rm = TRUE),
l_ht = loser_ht,
l_age= round(loser_age),
l_stIn = mean(l_1stIn, na.rm = TRUE),
l_stWon = mean(l_1stWon, na.rm = TRUE),
l_svpt = mean(l_svpt, na.rm = TRUE),
l_svgms = mean(l_SvGms, na.rm = TRUE),
l_bpSaved = mean(l_bpSaved, na.rm = TRUE),
l_bpFaced = mean(l_bpFaced, na.rm = TRUE),
l_min = mean(minutes, na.rm = TRUE))
df_loser <- distinct(df_loser,.keep_all = TRUE)
# Donner le même nom du variable au "winner_name" et "loser_name"
df_loser <- rename(df_loser, player = loser_name )
df_winner <- rename(df_winner, player = winner_name)
# Jointure des tables
df_player <- full_join(df_winner, df_loser, by = "player")
# Combinaison des variables
df_player <- mutate(df_player, ace = w_ace + l_ace,
height = case_when(w_ht == l_ht ~ w_ht, w_ht != l_ht ~ l_ht),
age = round(max(w_age,l_age)),
stin = w_stIn  + l_stIn,
stWon = w_stWon + l_stWon,
svpt = w_svpt +l_svpt,
svgms = w_svgms + l_svgms,
bpSaved = w_bpSaved + l_bpSaved,
bpFaced = w_bpFaced + l_bpFaced,
min = l_min + w_min) %>%
select(ace, height, age, stin, stWon, svpt, svgms, bpSaved, bpFaced, min)
# Supprimer les valeurs manquantes
df_player <- distinct(df_player,.keep_all = TRUE)
df_player %>%
select(ace, height, stin, stWon, svgms, bpSaved, bpFaced, min) %>%
drop_na() -> df_clean
df_clean <- as.data.frame(df_clean)
rownames(df_clean) <- df_clean[,1]
df_clean <- df_clean[,-1]
# Etude des corrélations
pairs(df_clean)
set.seed(123)
df_kmeans <- as.data.frame(scale(df_clean, center=T, scale=T))
nb <- NbClust(df_kmeans, distance = "euclidean", min.nc = 2, max.nc = 10, method = "kmeans")
#fviz_nbclust(nb)
#Trouver comment prendre que le dernier graph
set.seed(123)
km <- kmeans(df_kmeans, 4)
df_clean$classe_km <- km$cluster
# Coefficients de silhouette
#si <- cluster::silhouette(km$cluster,dist(df_kmeans,"euclidean"))
#plot(si)
#factoextra::fviz_silhouette(si) + ggplot2::ylim(-1,1)
#trouver comment prendre que le graph et pas les affichages console
df_CAH <- as.data.frame(scale(df_clean, center=T, scale=T))
D_cah <- dist(df_CAH,"euclidean")
CAH <- hclust(D_cah, method = "ward.D2")
# Comparaison 3 - 4 clusters avec CAH
clu_3 <- cutree(CAH,3)
clu_4 <- cutree(CAH,4)
si_cah_3 <- cluster::silhouette(clu_3, D_cah)
si_cah_4 <- cluster::silhouette(clu_4, D_cah)
df_CAH$classe <- clu_4
df_clean$classe_hc <- df_CAH$classe
plot(si_cah_3)
plot(si_cah_4)
# s3 <- factoextra::fviz_silhouette(si_cah_3) + ggplot2::ylim(-1,1)
# s4 <- factoextra::fviz_silhouette(si_cah_4) + ggplot2::ylim(-1,1)
# gridExtra::grid.arrange(s3,s4, ncol = 2, nrow = 1)
# trouver comment prendre que le graph et pas les affichages console
#Les fonctions d'inertie
inertie_cor<-function(df,p=NULL){
if (is.null(p)){ p <- rep(1,nrow(df))}
g <- ( p %*% as.matrix(df) ) / sum(p)
iner <- 0
for (i in seq(nrow(df))){ iner <- iner + sum((df[i,] - g)^2) * p[i]   }
return(iner)
}
inertie_inter_cor<-function(df,lab){
M<-matrix(rep(0,ncol(df)*length(unique(lab))),ncol = ncol(df))
for (k in unique(lab)){
M[k,]<-unname(colMeans(df[which(lab==k),]))
}
return(inertie_cor(data.frame(M),unname(table(lab))))
}
inertie_intra_cor <- function(df,lab){
res <- rep(0,length(unique(lab)))
for (i in unique(lab)) {
res[i] <- inertie_cor(df[which(lab==i),])
}
return(sum(res))
}
df_clean %>% filter(classe_hc == 1) -> Base1
Base1 <- Base1[,-c(9,10)]
df_clean %>% filter(classe_hc == 2) -> Base2
Base2 <- Base2[,-c(9,10)]
df_clean %>% filter(classe_hc == 3) -> Base3
Base3 <- Base3[,-c(9,10)]
df_clean %>% filter(classe_hc == 4) -> Base4
Base4 <- Base4[,-c(9,10)]
df_clean %>% filter(classe_hc == 4) -> Base4
Base4 <- Base4[,-c(9,10)]
ggplot(data=Base4,mapping = aes(x=bpFaced,y=bpSaved))+
geom_point()+geom_smooth(method="lm")+
ggtitle("Balle de Break Sauvé")+
guides(fill=F)
acp <- FactoMineR::PCA(Base4,scale.unit = T)
fviz_pca(acp)
acp <- FactoMineR::PCA(Base4,scale.unit = T,graph=FALSE)
fviz_pca(acp)
